'use strict';

// ============================================================================
// Directory
// ============================================================================

import {SiteModule} from 'utilities/module';
import {duration_to_string} from 'utilities/time';
import {createElement as e} from 'utilities/dom';
import {get} from 'utilities/object';

import Following from './following';
import Game from './game';
import Community from './community';

export default class Directory extends SiteModule {
	constructor(...args) {
		super(...args);

		this.should_enable = true;

		this.inject('i18n');
		this.inject('settings');
		this.inject('site.fine');

		this.inject(Following);
		this.inject(Game);
		this.inject(Community);
	}


	clearUptime(inst) { // eslint-disable-line class-methods-use-this
		if ( inst.ffz_update_timer ) {
			clearInterval(inst.ffz_update_timer);
			inst.ffz_update_timer = null;
		}

		if ( inst.ffz_uptime_el ) {
			inst.ffz_uptime_el.parentElement.removeChild(inst.ffz_uptime_el);
			inst.ffz_uptime_el = null;
			inst.ffz_uptime_span = null;
			inst.ffz_uptime_tt = null;
		}
	}


	updateUptime(inst, created_path, selector) {
		const container = this.fine.getHostNode(inst),
			card = container && container.querySelector && container.querySelector(selector),
			setting = this.settings.get('directory.following.uptime'),
			created_at = get(created_path, inst),
			up_since = created_at && new Date(created_at),
			uptime = up_since && Math.floor((Date.now() - up_since) / 1000) || 0;

		if ( ! card || setting === 0 || uptime < 1 )
			return this.clearUptime(inst);

		const up_text = duration_to_string(uptime, false, false, false, setting === 1);

		if ( ! inst.ffz_uptime_el )
			card.appendChild(inst.ffz_uptime_el = e('div',
				'video-preview-card__preview-overlay-stat c-background-overlay c-text-overlay font-size-6 top-0 right-0 z-default inline-flex absolute mg-05',
				e('div', 'tw-tooltip-wrapper inline-flex', [
					e('div', 'tw-stat', [
						e('span', 'c-text-live tw-stat__icon', e('figure', 'ffz-i-clock')),
						inst.ffz_uptime_span = e('span', 'tw-stat__value')
					]),
					inst.ffz_uptime_tt = e('div', 'tw-tooltip tw-tooltip--down tw-tooltip--align-center')
				])));

		if ( ! inst.ffz_update_timer )
			inst.ffz_update_timer = setInterval(this.updateUptime.bind(this, inst, created_path, selector), 1000);

		inst.ffz_uptime_span.textContent = up_text;
		inst.ffz_uptime_tt.textContent = up_since.toLocaleString();
	}
}